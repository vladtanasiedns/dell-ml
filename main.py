import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import Sequential, Input
from tensorflow.keras.layers import Dense, Dropout, Flatten
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder

data_path = "EMEA DELL DATA.csv"
data = pd.read_csv(data_path, sep=',', error_bad_lines=False, index_col=False, dtype='unicode')

drop_columns = ["ACTVY_ID", "TARGET_PER_ID", "SR_NUM", "DISPATCH_NUM", "HEADER_DSPCH_ORD_NBR", "CREATOR_LOGIN", "OWNER_LOGIN", "X_ISP_AGENT_DESC", "SVC_TYPE", 
                "TYPE", "SUB_TYPE", "LOB_DESC", "PROD_LN_DESC", "SYS_TYPE", "SVC_TAG", "TECH_DRCT_FLG", "B2C_FLG", "B2D_FLG", "DUMMY_SVC_TAG_FLG", "NEW_PART_SHIP_FLG",
                "PC_CONTACT_NAME", "PC_PHONE", "PC_SECONDARY_PHONE", "PC_EMAIL", "COMPANY_NAME_SHIPPING", "FIRST_NAME_SHIPPING", "LAST_NAME_SHIPPING", "ADDRESS_1_SHIPPING",
                "ADDRESS_2_SHIPPING", "ADDRESS_3_SHIPPING", "ADDRESS_4_SHIPPING", "CITY_SHIPPING", "STATE_SHIPPING", "ZIP_SHIPPING", "ACCIDENTAL_DAMAGE", "TAX_XMPTN_FLG", 
                "KYC", "STATUS_DATE", "PARTS_STATUS_DATE", "LABOR_STATUS_DATE", "DSPCH_TECH_ID", "PART_ROW_ID", "CRTD_BY_ID", "CRTD_DTS", "LAST_UPD_BY_ID", "LAST_UPD_DTS",
                "MODIFICATION_NBR", "PARNT_ROW_ID", "X_ISP_PART_ORD_CMPLTN_DTSZ", "X_ISP_DSPCH_NBR", "X_ISP_ESTD_DLVR_DTSZ", "X_ISP_FSD_EVNT_CD", "X_ISP_ONHAND_PUDO_DTSZ", 
                "X_ISP_OPERN_TYPE_CD", "X_ISP_ORD_SEQ_NBR", "X_ISP_PART_LN_NBR", "X_ISP_PART_NBR", "X_ISP_PRF_OF_DLVR_DTSZ", "X_ISP_PART_QTY", "X_ISP_PART_ORD_SHIPD_DTSZ",
                "X_ISP_PART_LN_STAT_CD", "X_ISP_PART_STAT_SEQ_NBR", "DW_SRC_APP_TBL_ID", "DW_AUD_EXTRC_DTS", "DW_SRC_EXTRC_DTS", "X_ISP_RCVD_PART_STAT_UPD_DTSZ", "REC_TYPE_DESC",
                "X_ISP_PRVDR_FILE_TYPE_DESC", "X_ISP_PART_DSTRB_HUB_NM", "X_ISP_FSD_CARR_NM", "X_ISP_FSD_WAYBILL_ID", "X_ISP_FSD_JOB_NBR_ID", "X_ISP_PART_DESC", "X_ISP_UNIT_PRC_AMT",
                "X_ISP_TAG_ID", "X_ISP_RTNED_DTS", "X_ISP_USER_ID", "X_ISP_NOT_IN_USE_FLG", "X_ISP_ATMPTED_DLVR_DTS", "X_ISP_RTN_QTY_TYPE_CD", "DW_LOG_DEL_FLG", "PART_TYPE", 
                "X_ISP_NEW_PPID", "X_ISP_OLD_PPID", "DW_BASE_IUD_CODE", "PARTITION_CREATION_TS", "SVC_DSPCH_ID", "ITM_NBR", "ITM_ROW_ID", "ITM_PARNT_ROW_ID", "ITM_QTY", "CCN", 
                "ITM_CLS_CD", "ITM_COMDTY_ID", "FSD_PART_ORD_ID", "PART_ORD_SEQ_NBR", "PART_ORD_LN_NBR", "SHIP_DSPCH_ORD_NBR", "SHIP_DSPCH_ORD_BU_ID", "DSPCH_ORD_STAT_CD",
                "SHIPD_DTS", "SHIPD_DT", "NEW_PART_FLG", "SUBSTT_FLG", "MOST_XPSV_PART_FLG", "DSTRB_HUB_NM", "LGST_PRVDR_ID", "OUTBND_TRCKG_ID", "INBND_TRCKG_ID", "TMZN_LOC_ID", 
                "LGST_PRVDR_ID", "OUTBND_TRCKG_ID", "INBND_TRCKG_ID", "TMZN_LOC_ID", "GBL_SVC_PRVDR_ID", "SVC_PRVDR_NM", "REGION", "HEADER_DSPCH_ORD_BU_ID", "LOCAL_CHANNEL",
                "DSPCH_CRT_DT", "HEADER_DSPCH_ORD_BU_ID", "SHIP_SVC_BU_ID", "DW_LD_GRP_VAL", "DW_SRC_SITE_ID", "DW_INS_UPD_DTS", "DW_ETL_SESS_NM", "PART_ORD_CMPLTN_DTSZ",
                "ATTEMPTED_PART_DLVR_DTS", "ESTIMATED_PART_DLVR_DTSZ", "ONHAND_PART_PUDO_DTSZ", "PRF_OF_DLVR_DTSZ", "PART_ORD_SHIPD_DTSZ", "RCVD_PART_STAT_UPD_DTSZ", "FSD_PUDO_PTNR_ID",
                "PART_TYPE_CD", "BKLG_ETA_DTS", "OneCost", "CUSTOMER_NUM", "COMPANY_NAME", "MAJ_PART_FLG", "GSE_DSPCH_DT", "FISCAL_WEEK", "ITEM_NUM", "ITEM_DESC", "ISS_CODE",
                "COST", "NRP", "SCRAP", "COMMODITY_TEAM", "RFC", "REPAIR", "RSL_ACTIVE_FLAG", "ACTIVE_PART", "BOM_Parent_Part", "DATE_PART_ADDED", "UPDATE_DATE", "TWO_WEEK_TR", "SPMD_ACTIVE_FLAG",
                "SPMD_RGN", "OneCost", "dispath_header_partition_date", "SPMD_FBSC", "APJ_PLNR_NAME", "EMEA_PLNR_NAME", "AMER_PLNR_NAME", "SUB_STATUS", "OCONUS", "CUST_LINK_NUM", "COMPLETE_CARE",
                "REASON_CODE", "CALL_TYPE", "PROD_TYPE_DESC", "PROJECT_ID", "COMMODITY_DESC", "REPORT_COM_CODE", "DEFAULT_ROUTE", "HEADER_SVC_BU_ID"]
data = data.drop(drop_columns, axis=1)
data.drop_duplicates(inplace=True)
data.dropna(inplace=True)

df = pd.DataFrame(data)

df['slow_dispatch'] = np.where(df['velocity'].astype('int64') >= 30, 1, 0)